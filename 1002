from drawing import Drawer, get_color_text

class Block:
    def __init__(self, coordinate, pivot, text):
        self.coord = coordinate      # 블록의 좌표
        self.pivot = pivot           # 블록의 회전 중심점
        self.text = text             # 블록의 모양(색 포함)


    def turn_cw(self):
        origin_x = self.coord[0] - self.pivot[0]
        origin_y = self.coord[1] - self.pivot[1]

        turn_x = -origin_y
        turn_y = origin_x

        final_x = turn_x + self.pivot[0]
        final_y = turn_y + self.pivot[1]

        self.coord = [final_x, final_y]
        pass

    def turn_ccw(self):
        origin_x = self.coord[0] - self.pivot[0]
        origin_y = self.coord[1] - self.pivot[1]

        turn_x = -origin_y
        turn_y = origin_x

        final_x = turn_x + self.pivot[0]
        final_y = turn_y + self.pivot[1]

        self.coord = [final_x, final_y]
        pass

    def draw(self, drawer):
        drawer.print_at(int(self.coord[0]), int(self.coord[1]), self.text)

class BlockSet:
    def __init__(self, coord_list, pivot, text):
        self.pivot = pivot
        self.text = text
        self.blocks = []

        for coord in coord_list:
            self.blocks.append(
                Block(
                    [coord[0] + self.pivot[0], coord[1] + self.pivot[1]],
                    self.pivot,
                    self.text
                )
            )

    def draw(self, drawer):
        for block in self.blocks:
            block.draw(drawer)

    def turn_cw(self):
        for block in self.blocks:
            block.turn_cw()


    def turn_ccw(self):
        for block in self.blocks:
            block.turn_ccw()


    def move_offset(self, offset):
        self.pivot[0] += offset[0]
        self.pivot[1] += offset[1]
        for block in self.blocks:
            block.coord[0] += offset[0]
            block.coord[1] += offset[1]
            block.pivot = self.pivot

    def set_pivot(self,pivot):
        self.pivot = pivot
        for block in self.blocks:
            block.coord[0] = block.coord[0] - block.pivot[0] + pivot[0]
            block.coord[1] = block.coord[1] - block.pivot[1] + pivot[1]

class TBlock(BlockSet):
    def __init__(self, pivot):
        super().__init__(
            [
                [-1, 0], [0, 0], [1, 0],
                         [0,1]
            ],
            pivot,
            get_color_text('violet', '■')
        )

class JBlock(BlockSet):
    def __init__(self, pivot):
        super().__init__(
            [
                [-1, -1],
                [-1, 0], [0, 0], [0, 1]
            ],
            pivot,
            get_color_text('violet', '■')
        )

class LBlock(BlockSet):
    def __init__(self, pivot):
        super().__init__(
            [
                                 [1,-1],
                [-1, 0], [0, 0], [0, 1]
            ],
            pivot,
            get_color_text('violet', '■')
        )

class SBlock(BlockSet):
    def __init__(self, pivot):
        super().__init__(
            [
                         [0, 0], [1, 0],
                [-1, 0], [0, 1]
            ],
            pivot,
            get_color_text('violet', '■')
        )

class ZBlock(BlockSet):
    def __init__(self, pivot):
        super().__init__(
            [
                [-1, 0], [0, 0],
                         [0, 1], [1, 1]
            ],
            pivot,
            get_color_text('violet', '■')
        )

class OBlock(BlockSet):
    def __init__(self, pivot):
        super().__init__(
            [
                         [0, 0], [1, 0]
                         [0, 1], [1, 1]
            ],
            pivot,
            get_color_text('violet', '■')
        )

class OBlock(BlockSet):
    def __init__(self, pivot):
        super().__init__(
            [
                [0, 0], [1, 0]
                [0, 1], [1, 1]
            ],
            pivot,
            get_color_text('violet', '■')
        )

    def turn_cw(self):
        pass

    def turn_ccw(self):
        pass

class IBlock(BlockSet):
    def __init__(self, pivot):
        self.turn_base = [
            [[-2, 0], [-1, 0], [0, 0], [1, 0]],
            [[0, 1], [0, 0], [0, -1], [0, -2]],
            [[-2, 1], [-1, 1], [0, 1], [1, 1]],
            [[-1, 1], [-1, 0], [-1, -1], [-1, -2]]
        ]
        super().__init__(
            [
                [-2, 0], [-1, 0][0, 0], [1, 0]
            ],
            pivot,
            get_color_text('cyan', '■')
        )

    def turn_cw(self):
        self.turn_state = (self.turn_state + 1) % 4
        for block, base in zip(self.blocks, self.turn_base[self.turn_state]):
            block.coord[0] = block.pivot[0] + base[0]
            block.coord[1] = block.pivot[1] + base[1]

    def turn_ccw(self):
        self.turn_state = 3 if self.turn_state - 1 < 0 else self.turn_state - 1
        for block, base in zip(self.blocks, self.turn_base[self.turn_state]):
            block.coord[0] = block.pivot[0] + base[0]
            block.coord[1] = block.pivot[1] + base[1]

if __name__ == '__main__':
    from time import sleep

    d = Drawer
    blocks = [
        OBlock([5, 5]),
        IBlock([10, 5]),
        JBlock([15, 5]),
        LBlock([20, 5]),
        TBlock([25, 5]),
        SBlock([30, 5]),
        ZBlock([35, 5])
    ]
    while True:
        for block in blocks:
            d.clear()
            block.turn_cw()
            block.draw(d)

        d.flush()
        sleep(1)


