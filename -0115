# 함수
# 1. 반복되는 내용을 재사용하기 위해서 작성
# 2. 어떠한 입력에 대한 출력을 정의
# def 함수명(매개변수):
# < 수행할 문장 >
# < 수행할 문장 > ,,,
"""
def add(a, b):
    return a + b

def say():
    return 'Hi'

def empty():
    pass

print(empty())
"""
# 3. 매개변수가 여러개 일때는? (*매개변수)
"""
def all_sum(*args):
    result = 0
    for i in args:
        result += i
    return result

res = all_sum(1, 2, 3, 4, 5, 6)
print(res)
"""
# 4. 키워드 매개변수 (**매개변수)
"""
def print_kwargs(**kwargs):
    print(kwargs)

print_kwargs(a=1, b=3, c=5, d='D')
"""
# 5. 결과값(return)은 항상 하나다.
"""
def add_and_mul(a, b):
    return a + b, a * b

add, mul = add_and_mul(3, 4)
print(add, mul)
"""
# 6. 매개변수에는 초기값을 지정할 수 있다.
"""
def people(name, age, genders='남성'):
    print(f'이름은 {name}, 나이는 {age}살, 성별은 {genders}' )

people('홍길동', 20)
people('춘향', 20, '여성')
"""
# 7. 변수의 범위(scope)는 함수 내에서만 유효하다.
# 8. 함수 밖의 변수를 함수 내에서 변경 가능하다. (global)
"""
a = 2
print('함수 밖:', id(a))
def add_one(a):
    global a
    a = a + 1
    print('함수 안:', id(a))
add_one(a)
print(a)
"""
# 9. 한줄 짜리 함수 작성 가능 (lembda)
"""
def add(a, b):
    return a * b

add2 = lembda a, b: a + b
print(add(1,3))
print(add2(1,3))
"""
# 10. 함수는 자시 자신을 호출할 수 있다. (재귀(Recursive)함수 라고 함)
#     재귀함수는 일반항을 구하는 것이 중요!!!!!
"""
def my_sum(n):
    s = 0
    for i in range(1, n + 1):
        s += i
    return s

#S(N) = S(N - 1) + N
def S(N):
    if n == 1:
        print(f'S({N}) = 1')
        return 1
    print(f'S({N}) = S({N}) + {n}')
    return S(N-1) + N

print(S(10))
"""


# 클래스 class
# 1. 클래스는 자신만의 데이터 타입을 정의하는 것
# 2. 클래스는 붕어빵 틀, 데이터의 형식을 정의하고,
#    틀에서 나온 붕어빵은 실체가 된다.
#    클래스 -> 붕어빵 틀, 인스턴스(instance) -> 붕어빵
# class 클래스 이름:
#   < 클래스의 내용 >
#   < 클래스의 내용 >
# 3. 클래스는 자신의 인스턴스를 생성할 때 '생성자'라고 불리는 함수를 호출함.
"""
class 붕어빵:
    # 붕어빵 클래스의 생성자
    def __init__(self, taste):
        #붕어빵의 멤버 필드(속성)
        self.taste = taste
    # 붕어빵의 멤버 매소드(함수)
    def print_taste(self):
        print(f'{self.taste}맛 붕어빵')

붕어빵1 = 붕어빵('팥')
붕어빵2 = 붕어빵('크림')
print(id(붕어빵1), id(붕어빵2))
print(type(붕어빵1) == type(붕어빵2))
붕어빵1.print_taste()
붕어빵2.print_taste()
"""
# 4. 클래스는 상속(interitance)을 받을 수 있다.
# class 클래스 이름(상속 받을 클래스 이름):
#   < ... >
# 사칙연산 계산기 클래스 강의
"""
class Calculator:
    def __init__(self):
        print('사칙연산 계산기의 생성자 호출')
        self.result = 0

    #덧셈
    def add(self, a, b):
        self.result = a + b
        return self.result
    #뺄셈
    def sub(self, a, b):
        self.result = a - b
        return self.result
    #곱셈
    def mul(self, a, b):
        self.result = a * b
        return self.result
    #나눗셈
    def div(self, a, b):
        self.result = a / b
        return self.result

class UpgradeClac(Calculator):
    def __init__(self):
        # 부모 클래스의 생성자 호출
        super().__init__()
        print('사칙연산 계산기의 생성자 호출')
    pass

    #나머지 연산
    def mod(self, a, b):
        self.result = a % b
        return self.result

    # 부모가 가진 add 함수의 override
    def add(self, * args):
        self.result = sum(args)
        return self.result

    # 계산기 간의 * 연산에 관한 override
    def __init__(self, other):
        new_calc = UpgradeClac()
        new_calc.result = self.result + other.result
        return new_calc

upcalc1 = UpgradeClac()
upcalc2 = UpgradeClac()
upcalc1.add(1, 2, 3) # 6
upcalc2.add(4, 5, 6) # 15

upcalc = upcalc1 + upcalc2
print(upcalc3.result)
"""
# 5. 클래스는 부모의 메소드(함수)를 재작성 할 수 있다.(override)
# 6. 클래스는 연산자의 기능을 재작성 할 수 있다(연산자 override)

# StackElement 클래스 정의
"""
class StackElement:
    # 자기 자신의 아래쪽 링크를 정의해야 할(next)
    # 데이터를 가지고 있어야 할 (value)
    def __init__(self):
    pass

# Stack 클래스 정의
class Stack:
    # 맨 위의 StackElement를 링크해야함 (top, 비어있으면 None로 초기화)
    # push, pop, peak의 3가지 매소드(함수)를 정의해야 함.
    # push는 스택의 맨위의 데이터를 쌓는것.
    # pop은 스택의 맨위의 데이터를 삭제하는 것
    #peak는 스택의 맨위의 데이터를 보는것.
    def __init__(self):
        self.top = None
        pass

    def push(self, value):
        if self.top is None:
            elem = StackElement(value, None)
            self.top = elem
        else:
            elem = StackElement(value, self.top)
            self.top = elem

    def pop(self):
        if self.top is None:
            return None
        else:
            pop_elem = self.top
            self.top = self.top.next
            return pop_elem.value

    def peak(self):
        if self.top is None:
            return None
        else:
            return self.top.value
        
stk = Stack()
stk.push(1)
stk.push(2)
stk.push(3)
print(stk.pop())
print(stk.pop())
print(stk.pop())
print(stk.pop())
"""
